source("~/Documents/MisScriptsR/plots/DualYaxis.R")
source("~/Documents/MisScriptsR/plots/DualYaxis.R")
source("~/Documents/MisScriptsR/plots/DualYaxis.R")
source("~/Documents/MisScriptsR/plots/DualYaxis.R")
mpg
mpg_summarized_tbl <- mpg %>%
select(-year) %>%
group_by(class) %>%
summarise(
across(
.cols  = where(is.numeric),
.fns   = median,
.names = "{.col}_median"
),
count = n()
) %>%
ungroup() %>%
mutate(
prop       = count / sum(count),
all_groups = "all_groups",
class      = fct_reorder(class, prop)
)
source("~/Documents/MisScriptsR/PCA/PCA.R")
# limpia la memoria RAM, siempre que no se definan 'params'
# rm(list = ls()) # Si lo hacemos, se pierden los 'params'
T00 <- proc.time() # initial time
if(!require(knitr, quietly = TRUE)){
install.packages("knitr", dependencies=TRUE)
library("knitr")
}
opts_chunk$set(echo = TRUE)
# Lee la matriz de datos filtrados guardada con el script 3.1
matriz_filt <- as.matrix(read.table("matriz-filt.tsv",
sep="\t",               # separado por tabuladores
header = T,             # hay cabecera
row.names = 1           # ID de genes en 1ª columna
)
# Núero máximo de genes a correlacionar y analizar
GENES_MAX <-  400 # echará unos 5 min en calcular las correlaciones y las P
# Método de correlación preferido
CORR_METHOD <- "pearson"
# Correlación mínima que se considera útil
R_MIN <- 0.75  # podríamos llegar incluso a 0.9
# Significación estadística mínima, que se puede subir incluso a 0,001
P_MIN <- 0.05
# Genes en los que tenemos un interés especial
MY_IDS <- c("ESR42942", "ESR43003", "ESR56172", "ESR42546", "ESR42547", "ESR42558")
# MY_IDS <- NULL # si no se quiere mirar ninguno
# cálculo de correlaciones, P y P ajustada
if(!require(psych, quietly = TRUE)){
install.packages("psych", dependencies=TRUE)
library("psych")
}
# representación de correlogramas
if(!require(corrplot, quietly = TRUE)){
install.packages("corrplot", dependencies=TRUE)
library("corrplot")
}
# Para las representaciones gráficas más versátiles
if(!require(ggplot2, quietly = TRUE)){
install.packages("ggplot2", dependencies=TRUE)
library("ggplot2")
}
# Para hacer gráficos interactivos
if(!require(plotly, quietly = TRUE)){
install.packages("plotly", dependencies=TRUE)
library("plotly")
}
# Para reformatear las tablas para que ggplot() las represente bien
if(!require(reshape2, quietly = TRUE)){
install.packages("reshape2", dependencies=TRUE)
library("reshape2") # reshape wide data.frame to a long format
}
# Para las redes
if(!require(igraph, quietly = TRUE)){
install.packages("igraph", dependencies=TRUE)
library("igraph")
}
calculaVars <- function(expData){
# Convertir el formato compatible a data.frame
tdata <- as.data.frame(expData)
ini_samples <- ncol(tdata) # columnas con las que calcular los índices
# Obtaining the mean of the expression values
tdata$mean <- rowMeans(tdata, na.rm = TRUE)
# Obtaining the dispersion D to each row
Disp <- function(x){var(x, na.rm = TRUE)/abs(mean(x, na.rm = TRUE))}
# Apply the function to the expression matrix
tdata$d <- apply(tdata[, 1:ini_samples], 1, Disp)
# Obtaining the coefficient of variation CV to each row
CV <- function(x){sd(x, na.rm = TRUE)/abs(mean(x, na.rm = TRUE))}
# Apply the function to the expression matrix
tdata$cv <- apply(tdata[, 1:ini_samples], 1, CV)
# Obtaining the coefficient of dispersion COD to each row
COD <- function(x){mad(x, na.rm = TRUE)/abs(median(x, na.rm = TRUE))}
# Apply the function to the expression matrix
tdata$cod <- apply(tdata[, 1:ini_samples], 1, COD)
# Return the expression matrix with the mean, the CV and the COD
return(tdata)
}
matriz_filt_t <- t(matriz_filt)
corr_spear_r <- cor(matriz_filt_t, method = "spearman")
# mostrar solo los 6 primeros valores de las primeras 6 columnas
n2print <- min(6:ncol(corr_spear_r)) # elegimos entre el menor de 6 o num de cols
kable(corr_spear_r[1:n2print, 1:n2print], digts=3, align="r", caption = "Ilustración de la correlación entre los primeros genes")
corPlot(corr_spear_r[1:25, 1:25],
diag = FALSE,
las = 2,
scale = TRUE,
main = "Correlograma con Spearman de los 25 primeros genes")
rm(corr_spear_r) # la eliminamos, solo era ilustrativa
n2print <- min(25:ncol(matriz_filt_t))  # máximo número de genes a representar
# Correlaciones entre los genes, con ci=F si no hay más de GENES_MAX genes
if (nrow(matriz_filt) > GENES_MAX) {
message("Demasiados genes (", nrow(matriz_filt), ") y no se calcularán las P")
corr_genes_r <- cor(matriz_filt_t, method = CORR_METHOD)
corPlot(corr_genes_r[1:n2print, 1:n2print],
diag = FALSE,
las = 2,
scale = TRUE,
main = "Correlograma COR de los primeros genes")
# kable(corr_genes_r[1:n2print, 1:n2print], digts=3, align="r", caption = "Ilustración de la correlación con COR entre los primeros genes")
} else {
# se calcula la r y la P con corr.test()
corr_genes <- corr.test(x = matriz_filt_t, ci = FALSE, method = CORR_METHOD)
corPlot(corr_genes$r[1:n2print, 1:n2print],
diag = FALSE,
las = 2,
scale = TRUE,
pval = corr_genes$p[1:n2print, 1:n2print],
main = "Correlograma COR.TEST de los primeros genes")
}
# obtenemos las listas de correlaciones con y sin P, según se haya hecho
# filtradas solo por las r y/o P mínimas definidas al principio
if (exists("corr_genes_r")) {                     # solo hay r
m <- corr_genes_r
# Convertir el resultado en un df por parejas de genes
corr_list = data.frame(Item1 = rownames(m)[row(m)[upper.tri(m)]],
Item2 = colnames(m)[col(m)[upper.tri(m)]],
r = m[upper.tri(m)])
# filtramos solo las correlaciones significativas
corr_df = corr_list[abs(corr_list$r) >= R_MIN,]
# ponemos solo 2 decimales a la r
corr_df$r <- format(round(corr_df$r,2), nsmall = 2)
rm(m)
} else if (exists("corr_genes")) {                       # sí hay P y r
m <- corr_genes$r
p <- corr_genes$p
corr_list = data.frame(Item1 = rownames(m)[row(m)[upper.tri(m)]],
Item2 = colnames(m)[col(m)[upper.tri(m)]],
r = m[upper.tri(m)],
P = p[lower.tri(p)],
P.adj = p[upper.tri(p)])
# filtramos solo las correlaciones significativas
corr_df = corr_list[abs(corr_list$r) >= R_MIN & corr_list$P.adj <= P_MIN,]
# ponemos solo 3 decimales a la r y 4 a las P
corr_df$r <- format(round(corr_df$r, 3), nsmall = 3)
corr_df$P <- format(round(corr_df$P, 4), nsmall = 4)
corr_df$P.adj <- format(round(corr_df$P.adj, 4), nsmall = 4)
rm(m, p)
} else {                                  # verificación de seguridad
stop("Algo ha fallado y no existen correlaciones")
}
# aspecto del fichero
kable(head(corr_df, n= 10L), caption = "Primeras 10 parejas del fichero de correlaciones")
# presentación de las correlaciones
plot(corr_df)
write.table(corr_df,
file = "BestCorrelations.tsv",
sep = "\t",
row.names = FALSE,
col.names = TRUE,
quote = FALSE)
HAYGENES <- length(MY_IDS) > 0
# define a customised matplot()
MyMatPlot <- function(m,
mainTitle = "Gene profiles") {
# Leave room for legend outside the plot
par(mar = c(5, 4, 4, 8), xpd = TRUE)
# plot de la matriz
matplot(t(m),  # transpose to put columns as x an gene expression as y
ylab = "Expression level",
main = mainTitle,
type = "b", pch = 0:25,
lty = 1:5, lwd = 2, col = c(1:6),
las = 2,
xaxt = "n") # remove x labels
# define new x labels
axis(1,  # below
at = 1:ncol(m),
labels = colnames(m),
las = 2,
cex.axis = 0.7)
# legend outside the plot
legend("topright",
inset = c(-0.25, 0), # legend outside the plot
legend = rownames(m),
lty = 1:5, lwd = 2, col = c(1:6),
bty= "o",
pch = 0:25,
cex = 0.7)
}
# los datos. Si solo hay un ID, se vuelve vector
myIDs_expr <- matriz_filt[rownames(matriz_filt) %in% MY_IDS, ]
# representación de los datos
MyMatPlot(myIDs_expr,
mainTitle = "Gene profiles in log2")
# Con ggplot hay que trasponer la matriz
xxx <- data.frame(t(myIDs_expr))
# el índce no pueden ser caracteres. Por eso rownames(xxx) no vale
# new_x <- rep(1:4, each=3)
new_x <- 1:12
samples_names <- rownames(xxx)
xxx <- cbind(new_x, xxx)
head(xxx) # para ver la columna adicional para representar el eje X
# reordenamos la tabla para que ggplot la represente bien
xxx2 <- melt(xxx,  id.vars = 'new_x', variable.name = 'gene')
head(xxx2)
ggp <- ggplot(xxx2, aes(new_x, value)) +
# colour lines per gene
geom_line(aes(colour = gene)) +
# resize points with the same colour than lines
geom_point(size = 1.25, aes(colour = gene)) +
# change x continuous labels for sample names
scale_x_continuous(name = "Samples", breaks = 1:length(samples_names), labels = samples_names) +
# change legend and Y title
scale_y_continuous(name = "Log-expression level") +
# add the title
ggtitle("Interactive profiles of selected genes") +
# simplify the plot lines and colours
theme_linedraw() +
# change orientation and size of sample names, title, background, legend, axis...
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
legend.position = "none",
panel.grid = element_line(color = "lightgray", linewidth = 0.5),
plot.title = element_text(lineheight = 0.8, face = "bold", size = 12, colour = "darkgreen"))
# print the interactive plot created with ggplot()
ggplotly(ggp)
# método clásico con línea de tendencia e intervalo
ggplot(xxx2, aes(x=new_x, y=value)) +
# poner línea en roja y = 0
geom_hline(yintercept=0, linetype=4, color="red") +
geom_line(aes(colour=gene, group=gene), linewidth=0.5, alpha=0.3) +
# indicar las columnas de valor+SD y valor-SD para barras de error
# geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2)) +
# Trend line with confidence interval
geom_smooth(method = 'loess', linewidth = 2, se = TRUE, color = "orange") +
# another theme for lines and colours
theme_light()
# para no depender de los nombres de las columnas, con valor medio y fondo típico de ggplot
ggcolnam <- colnames(xxx2)
ggplot(xxx2, aes(x=xxx2[, 1], y=xxx2[, 3])) +
# poner línea roja en y = 0
geom_hline(yintercept=0, linetype=4, color="red") +
geom_line(aes(colour=xxx2[, 2], group=xxx2[, 2]), linewidth=0.5, alpha=0.3) +
# indicar las columnas de valor+SD y valor-SD para barras de error
# geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2)) +
# mean line in blue
stat_summary(aes(y=xxx2[, 3]), fun=mean, geom='line', linewidth=2, color='blue') +
scale_x_continuous(name = ggcolnam[1], breaks = 1:length(samples_names), labels = samples_names) +
# change orientation and size of sample names
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
# change legend and Y title
scale_y_continuous(name = ggcolnam[3]) +
labs(colour = ggcolnam[2])
# IDs de MY_IDS que sí están en matriz_filt
myIDs_exrp_names <- rownames(matriz_filt)[rownames(matriz_filt) %in% MY_IDS]
HAYGENES <- length(myIDs_exrp_names) > 0
if (HAYGENES) message("Genes semilla con los que buscar correlaciones: ", toString(myIDs_exrp_names))
myCorr_df <- data.frame(
Item1 = numeric(),
Item2 = numeric(),
r = numeric(),
abs.r = numeric(),
P = numeric()
)
myCorr_df[1,] <- c(0, 0, 0, 0, 0) # la eliminamos luego
# cuántas vueltas hay que darle a la matriz myIDs_exrp_names
id_cicles <- length(myIDs_exrp_names)
# cuántas vueltas hay que darle a la matriz matriz_filt
row_cicles <- nrow(matriz_filt) # número de filas
# correlacionar los genes de una matriz con los de la otra
if (id_cicles == 1) {                 # solo hay una fila en myIDs_exrp_names
myIDs_expr <- as.vector(myIDs_expr) # convertir la fila en un vector
for (i in 1:row_cicles) {           # empezamos a recorrer matriz_filt
# correlaciona fila de x=myIDs_exrp_names con cada fila de y=matriz_filt
r_p <- cor.test(myIDs_expr, matriz_filt[i,], method=CORR_METHOD)
# añade resultados al dataframe myCorr_df: miGen, GenMatriz, r, |r| y P
myCorr_df <- rbind(myCorr_df, c(myIDs_exrp_names, rownames(matriz_filt)[i], r_p$estimate, abs(r_p$estimate), r_p$p.value))
}
} else {                              # podemos recorrer myIDs_exrp_names
for (j in 1:id_cicles) {
for (i in 1:row_cicles) {
r_p <- cor.test(myIDs_expr[j,], matriz_filt[i,], method=CORR_METHOD)
myCorr_df <- rbind(myCorr_df, c(myIDs_exrp_names[j], rownames(matriz_filt)[i], r_p$estimate, abs(r_p$estimate), r_p$p.value))
}
# eliminamos la primera columna porque la habíamos llenado de ceros
myCorr_df <- myCorr_df[-1, ]
# vemos el comienzo de las correlaciones que se han hecho
kable(head(myCorr_df), caption = "Primeras correlaciones calculadas")
# filtramos por correlacion y significatividad
tmp = myCorr_df[myCorr_df$abs.r >= R_MIN & myCorr_df$P <= P_MIN,]
# la ordenamos
myCorr_ord <- tmp[order(tmp$abs.r, decreasing = TRUE), ]
rm(tmp) # eliminamos variables innecesarias
message(paste0("Número de correlaciones que pasan: ", nrow(myCorr_ord)))
kable(head(myCorr_ord), caption = "Correlaciones más altas con los genes de interés")
# Guardamos las parejas de correlaciones
write.table(myCorr_ord,
file = "Correlacion_con_genes_de_interes.tsv",
sep = "\t",
col.names = NA,
quote = FALSE)
aNet <- graph.data.frame(myCorr_ord[, 1:2], directed = FALSE)
plot.igraph(aNet,
main = "Correlation-based network",
vertex.label = NA,
vertex.size = 8)
rglplot(aNet)
aNet <- graph.data.frame(myCorr_ord[, 1:2], directed = FALSE)
plot.igraph(aNet,
main = "Correlation-based network",
vertex.label = myIDs_exrp_names,
vertex.size = 8)
aNet <- graph.data.frame(myCorr_ord[, 1:2], directed = FALSE)
plot.igraph(aNet,
main = "Correlation-based network",
# vertex.label = NA,
mark.groups = myIDs_exrp_names,
vertex.size = 8)
aNet <- graph.data.frame(myCorr_ord[, 1:2], directed = FALSE)
plot.igraph(aNet,
main = "Correlation-based network",
vertex.label = NA,
mark.groups = myIDs_exrp_names,
vertex.size = 8)
rglplot(aNet)
tkplot(aNet)
aNet <- graph.data.frame(myCorr_ord[, 1:2], directed = FALSE)
plot.igraph(aNet,
main = "Correlation-based network",
mark.groups = myIDs_exrp_names,  # marca los genes de interés
vertex.label = NA,
vertex.size = 8)
ggp_tmp <- visNetwork::visIgraph(aNet) %>%
visNetwork::visNodes(size = 10)
print(ggp_tmp)
visNetwork::visIgraph(aNet)
aNet <- graph.data.frame(myCorr_ord[, 1:2], directed = FALSE)
plot.igraph(aNet,
main = "Correlation-based network",
mark.groups = myIDs_exrp_names,  # marca los genes de interés
vertex.label = NA,
vertex.size = 8)
visNetwork::visIgraph(aNet)
